#ifndef RSCS_ONEWIRE_H_
#define RSCS_ONEWIRE_H_

#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

/*
	Модуль программной реализации ведущего устройства проткола OneWire.
	Модуль обеспечивает возможность работы с несколькими шинами посредством структуры rscs_ow_bus_t
	которая является дескриптором шины.

	Модуль создан опираясь на публикацию http://aterlux.ru/index.php?page=article&art=1wire
*/



// Типовые команды ONEWIRE для работы с адресацией поддерживаемые большинством устройств
// ========================================================================================

// READ ADDRES - используется, когда ведомый на шине один.
// При получении этой команды ведомый выдает на шину свой уникальный 64битный идентификатор
#define RSCS_OW_CMD_READADDR		(0x33)

// Используется для пропуска этапа адресации. Получив эту команду каждый ведомый заканчивает этап адресации и считает
// что мастер работает именно с ним (даже если ведомых несколько)
#define RSCS_OW_CMD_SKIPADDR		(0xCC)

// Используется, когда на шине несколько ведомых для выбора одного из них.
// После этой команды на шину нужно выданить уникальный 64-ех битный идентификатор того устройства с которым ведется работа
// При получении этой команды все устройства, чей уникальный 64-ех битный идентификатор не совпадает с переданным
// "уходят" с шины - начинают игнорировать все команды, поступающие по ней.
#define RSCS_OW_CMD_MATCHADDR		(0x55)


// Интерфейсные функции
// ========================================================================================

// Инициализация шины - настройка железа МК для работы с OW шиной.
// пины на которыех работает шина, настраиваются в config.h
void rscs_ow_init_bus(void);

// Команда OW - RESET. Возвращает true, если был получен импульс присутсвия от ведомых на шине
bool rscs_ow_reset(void);

// Передача бита по OW шине
/* Бит передается согласно протоколу onewire с предвартилеьной выдачей "таймслота" */
void rscs_ow_write_bit(bool value);

// чтение бита с OW шины
/* Бит читается согласно протоколу onewire с предвартилеьной выдачей "таймслота" */
bool rscs_ow_read_bit(void);

// Передача байта на OW шину
/* байт записывается млашим битом вперед */
void rscs_ow_write(uint8_t byte);

// Чтение байта с OW шины
/* байт читается младшим битом вперед */
uint8_t rscs_ow_read(void);

// Передача n байт на OW шину
/* байты записываются млашим битом вперед */
void rscs_ow_write_n(const void * buffer, size_t buffersize);

// чтение n байт с OW шины
/* байты читаются младшим битом вперед */
void rscs_ow_read_n(void * buffer, size_t buffersize);


#endif /* RSCS_ONEWIRE_H_ */
